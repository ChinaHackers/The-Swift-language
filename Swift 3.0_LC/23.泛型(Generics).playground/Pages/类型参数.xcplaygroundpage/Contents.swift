//: ## 类型参数
//: - 在上面的 `swapTwoValues(_:_:)` 例子中，占位类型 T 是类型参数的一个例子。类型参数指定并命名一个占位类型，并且紧随在函数名后面，使用一对尖括号括起来（例如 `<T>`）。
//: - 无论何时函数被调用时, 类型参数就被实际的类型取代. 可以定义任何多类型参数, <占位符1,占位符2,..>
//: - 一旦一个类型参数被指定，你可以用它来定义一个函数的参数类型（例如 `swapTwoValues(_:_:)` 函数中的参数 a 和 b），或者作为函数的返回类型，还可以用作函数主体中的注释类型。在这些情况下，类型参数会在函数调用时被实际类型所替换。（在上面的 `swapTwoValues(_:_:) `例子中，当函数第一次被调用时，T 被 Int 替换，第二次调用时，被 `String` 替换。）

//你可提供多个类型参数，将它们都写在尖括号中，用逗号分开。
func swapTwoValues<T>(_ a: inout T, _ b: inout T) {
    let temporaryA = a
    a = b
    b = temporaryA
}


//: [上一页](@previous) | [下一页](@next)
