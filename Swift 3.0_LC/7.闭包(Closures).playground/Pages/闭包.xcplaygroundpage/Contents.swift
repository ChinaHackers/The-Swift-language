//: ## 闭包（Closure）
//: ----
//: 本页包含内容：
//: - 闭包表达式（Closure Expressions）
//: - 尾随闭包（Trailing Closures）
//: - 值捕获（Capturing Values）
//: - 闭包是引用类型（Closures Are Reference Types）
//: - 非逃逸闭包(Nonescaping Closures)
//: - 自动闭包（Autoclosures）

//:> 闭包是自包含的函数代码块，可以在代码中被传递和使用。Swift 中的闭包与 C 和 Objective-C 中的代码块（blocks）以及其他一些编程语言中的匿名函数比较相似。

//:> 闭包可以捕获和存储其所在上下文中任意常量和变量的引用。这就是所谓的闭合并包裹着这些常量和变量，俗称闭包。Swift 会为您管理在捕获过程中涉及到的所有内存操作。

//:> 注意: 1.如果您不熟悉捕获（capturing）这个概念也不用担心，您可以在值捕获章节对其进行详细了解。2.在函数章节中介绍的全局和嵌套函数实际上也是特殊的闭包，闭包采取如下三种形式之一：

//: - 全局函数是一个有名字但不会捕获任何值的闭包
//: - 嵌套函数是一个有名字并可以捕获其封闭函数域内值的闭包
//: - 闭包表达式是一个利用轻量级语法所写的可以捕获其上下文中变量或常量值的匿名闭包
/*:
Swift 的闭包表达式拥有简洁的风格，并鼓励在常见场景中进行语法优化，主要优化如下：
利用上下文推断参数和返回值类型
隐式返回单表达式闭包，即单表达式闭包可以省略return关键字
参数名称缩写
尾随（Trailing）闭包语法
 
 */

//: [闭包表达式](@next)
