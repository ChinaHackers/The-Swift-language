//: ### 类型安全和类型推断
//: - `Swift` 是一门类型安全的语言。类型安全的语言可以让你清楚地知道代码可以处理的值的类型。如果你的一部分代码期望获得 `String` ，你就不能错误的传给它一个 `Int` 。
//: - 因为 `Swift` 是类型安全的，他在编译代码的时候会进行类型检查，任何不匹配的类型都会被标记为错误。这会帮助你在开发阶段更早的发现并修复错误。
//: - 当你操作不同类型的值时，类型检查能帮助你避免错误。当然，这并不意味着你得为每一个常量或变量声明一个特定的类型。如果你没有为所需要的值进行类型声明，Swift 会使用类型推断的功能推断出合适的类型。通过检查你给变量赋的值，类型推断能够在编译阶段自动的推断出值的类型。

//: - 因为有了类型推断，Swift 和 C 以及 Objective-C 相比，只需要少量的类型声明。其实常量和变量仍然需要明确的类型，但是大部分的声明工作 Swift 会帮你做。
//: - 在你为一个变量或常量设定一个初始值的时候，类型推断就显得更加有用。它通常在你声明一个变量或常量同时设置一个初始的字面量（文本）时就已经完成。（字面量就是会直接出现在你代码中的值，比如下边代码中的 42 和 3.14159 。）

//: > 类型推断：编译器在编译的时候, 通过你提供的初始化值, 自动推断出特定的表达式的类型

//:例如，如果你给一个新的常量设定一个 42 的字面量，而且没有说它的类型是什么，`Swift` 会推断这个常量的类型是 `Int` ，因为你给这个常量初始化为一个看起来像是一个整数的数字。
let meaningOfLife = 42
//: 同样，如果你没有为一个浮点值的字面量设定类型，`Swift` 会推断你想创建一个 `Double` 。
let pi = 3.14159
//: `Swift` 在推断浮点值的时候始终会选择 `Double` （而不是 `Float` ）。
//如果你在一个表达式中将整数和浮点数结合起来， `Double` 会从内容中被推断出来。
let anotherPi = 3 + 0.14159
//:这字面量 3 没有显式的声明它的类型，但因为后边有一个浮点类型的字面量，所以这个类型就被推断为 `Double`  。

//: [上一页](@previous) | [下一页](@next)
