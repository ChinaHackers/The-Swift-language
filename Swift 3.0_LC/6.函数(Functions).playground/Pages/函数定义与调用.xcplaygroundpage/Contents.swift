
//: ## 函数定义与调用
//: ---
//: ### 函数的定义
//: - 使用关键字 `func`来定义一个函数.
//: - 函数定义可以包括`0`个或更多参数，参数可以写成 `name:Type `形式，作为附加信息当函数被调用时必须传递值它们给函数。函数可以选择是否有返回值，返回值写在` -> `后面，表明它们是作为结果返回的。函数的实现写在一对大括号里面`（{}）`.
//: - 每个函数都有一个函数名来描述它的功能。通过函数名以及对应类型的参数值来调用这个函数。函数的参数传递的顺序必须与参数列表相同。
//: - 函数的实参传递的顺序必须与形参列表相同，`->` 后定义函数的返回值类型。
//: ##### 语法
//: - 函数的定义
//: - `func` 函数名(形参: 形参类型) -> 返回类型
//: - 以 `func` 作为前缀，返回箭头 -> 表示函数的返回类型
/*
 func 函数名(形参) -> returntype
 {
     语句1
     语句2
        ……
     语句 N
     return 参数
 }
 */
// 以下我们定义了一个函数名为` runoob `的函数，形参的数据类型为` String`，返回值也为` String：`
func runoob(site: String) -> String {
    return site
}
print(runoob(site: "www.apple.com"))

//以上程序执行输出结果为：
//www.apple.com

//: ---
//: #### 函数调用
//: 我们可以通过 函数名 以及 对应类型的参数值 来调用 函数，函数的`参数传递`的顺序必须与`参数列表`相同。
// 以下我们定义了一个函数名为 `runoob` 的函数，形参 `site` 的数据类型为`String`，之后我们调用函数传递的实参也必须`String`类型，实参传入函数体后，将直接返回，返回的数据类型为`String`。

func runoob1(site: String) -> String {
    return site
}
print(runoob(site: "www.apple.com"))

//以上程序执行输出结果为：
//www.apple.com

//:> 注意: 函数 `print(_:separator:terminator:) `的第一个实际参数并没有标签，并且它的其他实际参数是可选的，是因为他们都有默认值。

//: [后退](@previous) | [函数参数与返回值](@next)
