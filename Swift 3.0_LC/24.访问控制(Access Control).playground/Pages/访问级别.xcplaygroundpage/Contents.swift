//: ## 访问级别

//: `Swift` 为代码中的实体提供了三种不同的访问级别。这些访问级别不仅与源文件中定义的实体相关，同时也与源文件所属的模块相关。
//: - `public：`可以访问同一模块源文件中的任何实体，在模块外也可以通过导入该模块来访问源文件里的所有实体。通常情况下，框架中的某个接口可以被任何人使用时，你可以将其设置为 `public` 级别。
//: - `internal：`可以访问同一模块源文件中的任何实体，但是不能从模块外访问该模块源文件中的实体。通常情况下，某个接口只在应用程序或框架内部使用时，你可以将其设置为 `internal` 级别。
//: - `private：`限制实体只能在所在的源文件内部使用。使用 `private` 级别可以隐藏某些功能的实现细节。
// public 为最高（限制最少）访问级别，private 为最低（限制最多）访问级别。
//:> 注意: `Swift` 中的 `private` 访问级别不同于其他语言，它的范围限于源文件，而不是声明范围内。这就意味着，一个类型可以访问其所在源文件中的所有 `private` 实体，但是如果它的扩展定义在其他源文件中，那么它的扩展就不能访问它在这个源文件中定义的 `private` 实体。

//: ### 访问级别基本原则
//: `Swift` 中的访问级别遵循一个基本原则：不可以在某个实体中定义访问级别更高的实体。
//: - 例如：一个 `public` 访问级别的变量，其类型的访问级别不能是 `internal` 或 `private。`因为无法保证变量的类型在使用变量的地方也具有访问权限。
//: - 函数的访问级别不能高于它的参数类型和返回类型的访问级别。因为如果函数定义为 `public` 而参数类型或者返回类型定义为 `internal` 或 `private，`就会出现函数可以在任何地方被访问，但是它的参数类型和返回类型却不可以。

//: ### 默认访问级别
//: 如果你不为代码中的实体显式指定访问级别，那么它们默认为 `internal` 级别（有一些例外情况，稍后会进行说明）。因此，在大多数情况下，我们不需要显式指定实体的访问级别。

//: ### 单 target 应用程序的访问级别
//: 当你编写一个单 `target` 应用程序时，应用的所有功能都是为该应用服务，而不需要提供给其他应用或者模块使用，所以我们不需要明确设置访问级别，使用默认的访问级别 `internal` 即可。但是，你也可以使用 `private` 级别，用于隐藏一些功能的实现细节。

//: ### 框架的访问级别
//: 当你开发框架时，就需要把一些对外的接口定义为 `public` 级别，以便使用者导入该框架后可以正常使用其功能。这些被你定义为 `public` 的接口，就是这个框架的 `API。`

//:>注意: 框架依然会使用默认的 `internal` 级别，也可以指定为 `private` 级别。当你想把某个实体作为框架的 `API` 的时候，需显式为其指定 `public` 级别。

//: ### 单元测试 target 的访问级别
//: 当你的应用程序包含单元测试 `target` 时，为了测试，测试模块需要访问应用程序模块中的代码。默认情况下只有 `public `级别的实体才可以被其他模块访问。然而，如果在导入应用程序模块的语句前使用` @testable` 特性，然后在允许测试的编译设置`（Build Options -> Enable Testability）`下编译这个应用程序模块，单元测试 `target` 就可以访问应用程序模块中所有 `internal` 级别的实体。

//: [上一页](@previous) | [下一页](@next)
