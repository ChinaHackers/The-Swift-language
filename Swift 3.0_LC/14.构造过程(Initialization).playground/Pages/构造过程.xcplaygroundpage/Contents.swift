//: ## 构造过程（Initialization）
//: 本页包含内容：
//: - 存储属性的初始赋值
//: - 自定义构造过程
//: - 默认构造器
//: - 值类型的构造器代理
//: - 类的继承和构造过程
//: - 可失败构造器
//: - 必要构造器
//: - 通过闭包或函数设置属性的默认值

//: 构造过程是为了使用某个类、结构体或枚举类型的实例而进行的准备过程。这个过程包含了为实例中的每个属性设置初始值和为其执行必要的准备和初始化任务。

//: Swift 构造函数使用 init() 方法。
//: - 与 Objective-C 中的构造器不同，Swift 的构造器无需返回值，它们的主要任务是保证新实例在第一次使用前完成正确的初始化。
//: - 类实例也可以通过定义析构器（deinitializer）在类实例释放之前执行清理内存的工作。

//: ----
//: ### 存储型属性的初始赋值
//: - 类和结构体在实例创建时，必须为所有存储型属性设置合适的初始值。
//: - 存储属性在构造器中赋值时，它们的值是被直接设置的，不会触发任何属性观测器。

//: 存储属性在构造器中赋值流程：
//: - 创建初始值。
//: - 在属性定义中指定默认属性值。
//: - 初始化实例，并调用 init() 方法。

//: 构造器
//: 构造器在创建某特定类型的新实例时调用。它的最简形式类似于一个不带任何参数的实例方法，以关键字init命名。

/*
语法
init()
{
    // 在此处执行构造过程
}
 
 */
 
//实例
//结构体定义了一个 (不带参数) 的构造器 init，并在里面将存储型属性 length 和 breadth 的值初始化为 6 和 12：
struct rectangle {
    
    var length: Double  // 长
    var breadth: Double // 宽
    init() {
        length = 6
        breadth = 12
    }
}
var area = rectangle()  // area: 面积
print("矩形面积为 \(area.length * area.breadth)")

//以上程序执行输出结果为：
//矩形面积为 72.0

//: ---
//: ### 默认属性值
//我们可以在构造器中为存储型属性设置初始值；同样，也可以在属性声明时为其设置默认值。
//使用默认值能让你的构造器更简洁、更清晰，且能通过默认值自动推导出属性的类型。

//以下实例我们在属性声明时为其设置默认值：
struct rectangle2 {
    // 设置默认值
    var length = 6
    var breadth = 12
}
var area2 = rectangle2()
print("矩形的面积为 \(area2.length * area2.breadth)")
//以上程序执行输出结果为：
//矩形面积为 72

//: [自定义构造过程](@next)
