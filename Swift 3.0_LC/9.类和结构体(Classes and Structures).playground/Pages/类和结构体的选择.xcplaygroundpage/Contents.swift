//: [后退](@previous)

//: - 类和结构体的选择

//: - `结构体实例` 总是通过 `值传递`，`类实例`总是通过 `引用传递`。这意味两者适用不同的任务。当你在考虑一个工程项目的数据结构和功能的时候，你需要决定每个数据结构是定义成类还是结构体。

//: - 按照通用的准则，当符合一条或多条以下条件时，请考虑构建结构体：

//: - 该数据结构的主要目的是用来封装少量相关简单数据值。
//: - 有理由预计该数据结构的实例在被赋值或传递时，封装的数据将会被拷贝而不是被引用。
//: - 该数据结构中储存的值类型属性，也应该被拷贝，而不是被引用。
//: - 该数据结构不需要去继承另一个既有类型的属性或者行为。

//举例来说，以下情境中适合使用结构体：

//几何形状的大小，封装一个width属性和height属性，两者均为Double类型。
//一定范围内的路径，封装一个start属性和length属性，两者均为Int类型。
//三维坐标系内一点，封装x，y和z属性，三者均为Double类型。

//:在所有其它案例中，定义一个类，生成一个它的实例，并通过引用来管理和传递。实际中，这意味着绝大部分的自定义数据构造都应该是类，而非结构体。

//: [字符串\数组\字典类型的赋值与复制行为](@next)
