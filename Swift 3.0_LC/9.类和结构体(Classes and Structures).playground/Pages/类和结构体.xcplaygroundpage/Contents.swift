//: - 类和结构体（Classes and Structures）

//: 本页包含内容：

//: - 类和结构体对比
//: - 结构体和枚举是值类型
//: - 类是引用类型
//: - 类和结构体的选择
//: - 字符串(`String`)、数组(`Array`)、和字典(`Dictionary`)类型的赋值与复制行为

//: 类和结构体是人们构建代码所用的一种通用且灵活的构造体。我们可以使用完全相同的语法规则来为类和结构体定义属性（常量、变量）和添加方法，从而扩展类和结构体的功能。

//: 与其他编程语言所不同的是，Swift 并不要求你为 自定义类 和 结构 去创建 接口文件 和 实现文件。
//: 你所要做的是在一个单一文件中定义一个` 类 `或者 ` 结构体 `，系统将会自动生成面向其它代码的外部接口。

//: 注意: 通常一个类的实例被称为对象。

//: 然而在 Swift 中，类和结构体的关系要比在其他语言中更加的密切，本章中所讨论的大部分功能都可以用在类和结构体上。

//: 因此，我们会主要使用实例而不是对象。


//: [类和结构体对比](@next)
